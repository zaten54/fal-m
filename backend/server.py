from fastapi import FastAPI, APIRouter, HTTPException, UploadFile, File, Depends, BackgroundTasks
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
from pathlib import Path
from pydantic import BaseModel, Field, EmailStr
from typing import List, Optional
import uuid
from datetime import datetime, timedelta
import base64
from emergentintegrations.llm.chat import LlmChat, UserMessage, ImageContent
import asyncio
import random
import bcrypt
import jwt
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail


ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection
mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(mongo_url)
db = client[os.environ['DB_NAME']]

# Create the main app without a prefix
app = FastAPI(title="Fal UygulamasÄ± API", description="AI destekli fal okuma uygulamasÄ±")

# Create a router with the /api prefix
api_router = APIRouter(prefix="/api")

# JWT Configuration
JWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY')
JWT_ALGORITHM = os.environ.get('JWT_ALGORITHM', 'HS256')
JWT_ACCESS_TOKEN_EXPIRE_MINUTES = int(os.environ.get('JWT_ACCESS_TOKEN_EXPIRE_MINUTES', 1440))

# SendGrid Configuration
SENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY')
SENDER_EMAIL = os.environ.get('SENDER_EMAIL')

# Security
security = HTTPBearer()

# User Authentication Models
class User(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    email: EmailStr
    hashed_password: str
    is_verified: bool = False
    verification_token: Optional[str] = None
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)

class UserRegister(BaseModel):
    email: EmailStr
    password: str

class UserLogin(BaseModel):
    email: EmailStr
    password: str

class UserResponse(BaseModel):
    id: str
    email: str
    is_verified: bool
    created_at: datetime

class Token(BaseModel):
    access_token: str
    token_type: str
    user: UserResponse

class VerifyEmail(BaseModel):
    token: str

# Email Service Classes
class EmailService:
    def __init__(self):
        self.api_key = SENDGRID_API_KEY
        self.sender_email = SENDER_EMAIL
        if not self.api_key or not self.sender_email:
            raise ValueError("SendGrid API key or sender email not configured")
    
    async def send_verification_email(self, recipient_email: str, verification_token: str):
        """Email doÄŸrulama maili gÃ¶nder"""
        try:
            verification_url = f"http://localhost:3000/verify-email?token={verification_token}"
            
            subject = "MysticLens - Email Adresinizi DoÄŸrulayÄ±n"
            
            html_content = f"""
            <html>
                <body style="font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                    <div style="text-align: center; margin-bottom: 30px;">
                        <h1 style="color: #AF52DE; font-size: 32px; margin: 0;">ðŸ”® MysticLens</h1>
                        <p style="color: #6B7280; font-size: 16px; margin: 10px 0;">Mistik dÃ¼nyaya hoÅŸ geldiniz</p>
                    </div>
                    
                    <div style="background: linear-gradient(135deg, #AF52DE, #007AFF); padding: 30px; border-radius: 16px; color: white; text-align: center; margin-bottom: 30px;">
                        <h2 style="margin: 0 0 15px 0; font-size: 24px;">Email Adresinizi DoÄŸrulayÄ±n</h2>
                        <p style="margin: 0; font-size: 16px; opacity: 0.9;">HesabÄ±nÄ±zÄ± aktifleÅŸtirmek iÃ§in aÅŸaÄŸÄ±daki butona tÄ±klayÄ±n</p>
                    </div>
                    
                    <div style="text-align: center; margin-bottom: 30px;">
                        <a href="{verification_url}" 
                           style="display: inline-block; background: #007AFF; color: white; text-decoration: none; padding: 15px 30px; border-radius: 12px; font-weight: 600; font-size: 16px;">
                            Email Adresimi DoÄŸrula
                        </a>
                    </div>
                    
                    <div style="background: #F9FAFB; padding: 20px; border-radius: 12px; margin-bottom: 20px;">
                        <p style="margin: 0; color: #6B7280; font-size: 14px;">
                            <strong>Not:</strong> Bu link gÃ¼venlik nedeniyle 24 saat sonra geÃ§ersiz hale gelecektir.
                        </p>
                    </div>
                    
                    <div style="text-align: center; color: #9CA3AF; font-size: 12px;">
                        <p>Bu email MysticLens tarafÄ±ndan gÃ¶nderilmiÅŸtir.</p>
                        <p>Link Ã§alÄ±ÅŸmÄ±yorsa ÅŸu adresi kopyalayÄ±n: {verification_url}</p>
                    </div>
                </body>
            </html>
            """
            
            message = Mail(
                from_email=self.sender_email,
                to_emails=recipient_email,
                subject=subject,
                html_content=html_content
            )
            
            sg = SendGridAPIClient(self.api_key)
            response = sg.send(message)
            
            return response.status_code == 202
            
        except Exception as e:
            logging.error(f"Email sending error: {str(e)}")
            raise HTTPException(status_code=500, detail=f"Email gÃ¶nderme hatasÄ±: {str(e)}")

# Authentication Service
class AuthService:
    def __init__(self):
        self.email_service = EmailService()
    
    def hash_password(self, password: str) -> str:
        """ParolayÄ± hash'le"""
        salt = bcrypt.gensalt()
        return bcrypt.hashpw(password.encode('utf-8'), salt).decode('utf-8')
    
    def verify_password(self, password: str, hashed_password: str) -> bool:
        """Parola doÄŸrula"""
        return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))
    
    def create_access_token(self, data: dict) -> str:
        """JWT token oluÅŸtur"""
        to_encode = data.copy()
        expire = datetime.utcnow() + timedelta(minutes=JWT_ACCESS_TOKEN_EXPIRE_MINUTES)
        to_encode.update({"exp": expire})
        return jwt.encode(to_encode, JWT_SECRET_KEY, algorithm=JWT_ALGORITHM)
    
    def verify_token(self, token: str) -> dict:
        """JWT token doÄŸrula"""
        try:
            payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[JWT_ALGORITHM])
            return payload
        except jwt.ExpiredSignatureError:
            raise HTTPException(status_code=401, detail="Token sÃ¼resi dolmuÅŸ")
        except jwt.JWTError:
            raise HTTPException(status_code=401, detail="GeÃ§ersiz token")
    
    def generate_verification_token(self) -> str:
        """Email doÄŸrulama token'Ä± oluÅŸtur"""
        return str(uuid.uuid4())

# Initialize services
auth_service = AuthService()

# Authentication dependency
async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """Mevcut kullanÄ±cÄ±yÄ± al"""
    try:
        token = credentials.credentials
        payload = auth_service.verify_token(token)
        user_id = payload.get("sub")
        
        if not user_id:
            raise HTTPException(status_code=401, detail="GeÃ§ersiz token")
        
        # KullanÄ±cÄ±yÄ± veritabanÄ±ndan al
        user = await db.users.find_one({"id": user_id})
        if not user:
            raise HTTPException(status_code=401, detail="KullanÄ±cÄ± bulunamadÄ±")
        
        return User(**user)
    except Exception as e:
        raise HTTPException(status_code=401, detail="Kimlik doÄŸrulama hatasÄ±")

# Optional authentication dependency
async def get_current_user_optional(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """Opsiyonel kullanÄ±cÄ± (token yoksa None dÃ¶ner)"""
    try:
        return await get_current_user(credentials)
    except:
        return None


# Define Models
class StatusCheck(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    client_name: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class StatusCheckCreate(BaseModel):
    client_name: str

# Coffee Reading Models
class CoffeeReadingCreate(BaseModel):
    image_base64: str
    session_id: Optional[str] = None

class CoffeeReadingResponse(BaseModel):
    id: str
    session_id: str
    symbols_found: List[str]
    interpretation: str
    timestamp: datetime
    confidence_score: Optional[float] = None

class CoffeeReading(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    session_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    image_base64: str
    symbols_found: List[str] = []
    interpretation: str
    confidence_score: Optional[float] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)

# Tarot Models
class TarotCard(BaseModel):
    id: int
    name: str
    name_tr: str
    suit: str  # major_arcana, cups, wands, swords, pentacles
    meaning_upright: str
    meaning_reversed: str
    description: str
    image_url: str

class TarotReadingCreate(BaseModel):
    spread_type: str = "three_card"  # three_card, celtic_cross
    session_id: Optional[str] = None

class TarotReadingResponse(BaseModel):
    id: str
    session_id: str
    spread_type: str
    cards_drawn: List[dict]  # [{"card": TarotCard, "position": str, "reversed": bool}]
    interpretation: str
    timestamp: datetime

class TarotReading(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    session_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    spread_type: str
    cards_drawn: List[dict] = []
    interpretation: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)

# Palm Reading Models
class PalmReadingCreate(BaseModel):
    image_base64: str
    hand_type: str = "right"  # right, left
    session_id: Optional[str] = None

class PalmReadingResponse(BaseModel):
    id: str
    session_id: str
    hand_type: str
    lines_found: List[str]
    interpretation: str
    timestamp: datetime
    confidence_score: Optional[float] = None

class PalmReading(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    session_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    image_base64: str
    hand_type: str
    lines_found: List[str] = []
    interpretation: str
    confidence_score: Optional[float] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)

# Astrology Models
class AstrologyReadingCreate(BaseModel):
    birth_date: str  # YYYY-MM-DD format
    birth_time: str  # HH:MM format
    birth_place: str
    session_id: Optional[str] = None

class AstrologyReadingResponse(BaseModel):
    id: str
    session_id: str
    birth_date: str
    birth_time: str
    birth_place: str
    zodiac_sign: str
    planets: dict
    birth_chart: dict
    interpretation: str
    timestamp: datetime

class AstrologyReading(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    session_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    birth_date: str
    birth_time: str
    birth_place: str
    zodiac_sign: str
    planets: dict = {}
    birth_chart: dict = {}
    interpretation: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)
# Tarot Deck Data (Major Arcana + Minor Arcana sample)
TAROT_DECK = [
    # Major Arcana
    {"id": 0, "name": "The Fool", "name_tr": "Deli", "suit": "major_arcana", "meaning_upright": "Yeni baÅŸlangÄ±Ã§lar, masumiyet, spontanlÄ±k", "meaning_reversed": "Dikkatsizlik, aptalca kararlar", "description": "Yeni bir yolculuÄŸun baÅŸlangÄ±cÄ±", "image_url": "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400"},
    {"id": 1, "name": "The Magician", "name_tr": "BÃ¼yÃ¼cÃ¼", "suit": "major_arcana", "meaning_upright": "GÃ¼Ã§, beceri, konsantrasyon", "meaning_reversed": "ManipÃ¼lasyon, kÃ¶tÃ¼ niyet", "description": "Ä°Ã§ gÃ¼cÃ¼ ve yaratÄ±cÄ±lÄ±ÄŸÄ± temsil eder", "image_url": "https://images.unsplash.com/photo-1551292831-023188c04451?w=400"},
    {"id": 2, "name": "The High Priestess", "name_tr": "YÃ¼ksek Rahibe", "suit": "major_arcana", "meaning_upright": "Sezgi, gizem, bilinÃ§altÄ±", "meaning_reversed": "SÄ±rlarÄ±n aÃ§Ä±ÄŸa Ã§Ä±kmasÄ±", "description": "Ä°Ã§ bilgelik ve sezgileri temsil eder", "image_url": "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400"},
    {"id": 3, "name": "The Empress", "name_tr": "Ä°mparatoriÃ§e", "suit": "major_arcana", "meaning_upright": "Bereket, annelik, yaratÄ±cÄ±lÄ±k", "meaning_reversed": "BoÅŸa harcama, aÅŸÄ±rÄ±lÄ±k", "description": "DoÄŸurganlÄ±k ve bolluk", "image_url": "https://images.unsplash.com/photo-1551292831-023188c04451?w=400"},
    {"id": 4, "name": "The Emperor", "name_tr": "Ä°mparator", "suit": "major_arcana", "meaning_upright": "Otorite, yapÄ±, kontrol", "meaning_reversed": "TiranlÄ±k, katÄ±lÄ±k", "description": "GÃ¼Ã§ ve liderlik", "image_url": "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400"},
    {"id": 5, "name": "The Hierophant", "name_tr": "Papaz", "suit": "major_arcana", "meaning_upright": "Gelenek, eÄŸitim, Ã¶ÄŸretmenlik", "meaning_reversed": "Dogma, uyumsuzluk", "description": "SpiritÃ¼el rehberlik", "image_url": "https://images.unsplash.com/photo-1551292831-023188c04451?w=400"},
    {"id": 6, "name": "The Lovers", "name_tr": "AÅŸÄ±klar", "suit": "major_arcana", "meaning_upright": "AÅŸk, uyum, iliÅŸkiler", "meaning_reversed": "Uyumsuzluk, yanlÄ±ÅŸ seÃ§imler", "description": "AÅŸk ve baÄŸlÄ±lÄ±k", "image_url": "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400"},
    {"id": 7, "name": "The Chariot", "name_tr": "SavaÅŸ ArabasÄ±", "suit": "major_arcana", "meaning_upright": "Zafer, kararlÄ±lÄ±k, kontrol", "meaning_reversed": "Kontrol kaybÄ±, yenilgi", "description": "Ä°rade gÃ¼cÃ¼ ve zafer", "image_url": "https://images.unsplash.com/photo-1551292831-023188c04451?w=400"},
    {"id": 8, "name": "Strength", "name_tr": "GÃ¼Ã§", "suit": "major_arcana", "meaning_upright": "Ä°Ã§ gÃ¼Ã§, cesaret, sabÄ±r", "meaning_reversed": "ZayÄ±flÄ±k, ÅŸÃ¼phe", "description": "Ä°Ã§ gÃ¼Ã§ ve cesaret", "image_url": "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400"},
    {"id": 9, "name": "The Hermit", "name_tr": "ErmiÅŸ", "suit": "major_arcana", "meaning_upright": "Ä°Ã§ arayÄ±ÅŸ, rehberlik, bilgelik", "meaning_reversed": "Ä°zolasyon, yalnÄ±zlÄ±k", "description": "Ä°Ã§ arayÄ±ÅŸ ve bilgelik", "image_url": "https://images.unsplash.com/photo-1551292831-023188c04451?w=400"},
    {"id": 10, "name": "Wheel of Fortune", "name_tr": "Kader Ã‡arkÄ±", "suit": "major_arcana", "meaning_upright": "Åžans, kader, dÃ¶ngÃ¼ler", "meaning_reversed": "KÃ¶tÃ¼ ÅŸans, kontrol dÄ±ÅŸÄ± olaylar", "description": "Kader ve deÄŸiÅŸim", "image_url": "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400"},
    {"id": 11, "name": "Justice", "name_tr": "Adalet", "suit": "major_arcana", "meaning_upright": "Adalet, denge, hakikat", "meaning_reversed": "Adaletsizlik, dengesizlik", "description": "Adalet ve denge", "image_url": "https://images.unsplash.com/photo-1551292831-023188c04451?w=400"},
    {"id": 12, "name": "The Hanged Man", "name_tr": "AsÄ±lan Adam", "suit": "major_arcana", "meaning_upright": "FedakarlÄ±k, yeni bakÄ±ÅŸ aÃ§Ä±sÄ±", "meaning_reversed": "DirenÃ§, eski kalÄ±plar", "description": "FedakarlÄ±k ve yeni perspektif", "image_url": "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400"},
    {"id": 13, "name": "Death", "name_tr": "Ã–lÃ¼m", "suit": "major_arcana", "meaning_upright": "DÃ¶nÃ¼ÅŸÃ¼m, yenilenme, bitiÅŸ", "meaning_reversed": "DirenÃ§, duraÄŸanlÄ±k", "description": "DÃ¶nÃ¼ÅŸÃ¼m ve yenilenme", "image_url": "https://images.unsplash.com/photo-1551292831-023188c04451?w=400"},
    {"id": 14, "name": "Temperance", "name_tr": "Denge", "suit": "major_arcana", "meaning_upright": "Denge, sabÄ±r, uyum", "meaning_reversed": "Dengesizlik, aÅŸÄ±rÄ±lÄ±k", "description": "Denge ve Ã¶lÃ§Ã¼lÃ¼lÃ¼k", "image_url": "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400"},
    {"id": 15, "name": "The Devil", "name_tr": "Åžeytan", "suit": "major_arcana", "meaning_upright": "BaÄŸÄ±mlÄ±lÄ±k, kÄ±sÄ±tlama, maddi dÃ¼nya", "meaning_reversed": "Ã–zgÃ¼rleÅŸme, farkÄ±ndalÄ±k", "description": "BaÄŸÄ±mlÄ±lÄ±k ve kÄ±sÄ±tlamalar", "image_url": "https://images.unsplash.com/photo-1551292831-023188c04451?w=400"},
    {"id": 16, "name": "The Tower", "name_tr": "Kule", "suit": "major_arcana", "meaning_upright": "Ani deÄŸiÅŸim, yÄ±kÄ±m, aydÄ±nlanma", "meaning_reversed": "Ä°Ã§ Ã§Ã¶kÃ¼ÅŸ, kaÃ§Ä±nma", "description": "Ani deÄŸiÅŸim ve yÄ±kÄ±m", "image_url": "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400"},
    {"id": 17, "name": "The Star", "name_tr": "YÄ±ldÄ±z", "suit": "major_arcana", "meaning_upright": "Umut, ilham, rehberlik", "meaning_reversed": "Umutsuzluk, kayÄ±p", "description": "Umut ve ilham", "image_url": "https://images.unsplash.com/photo-1551292831-023188c04451?w=400"},
    {"id": 18, "name": "The Moon", "name_tr": "Ay", "suit": "major_arcana", "meaning_upright": "Sezgi, yanÄ±lsama, bilinÃ§altÄ±", "meaning_reversed": "AÃ§Ä±klÄ±k, gerÃ§eÄŸin ortaya Ã§Ä±kmasÄ±", "description": "Sezgi ve gizem", "image_url": "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400"},
    {"id": 19, "name": "The Sun", "name_tr": "GÃ¼neÅŸ", "suit": "major_arcana", "meaning_upright": "Mutluluk, baÅŸarÄ±, enerji", "meaning_reversed": "GeÃ§ici mutluluksuzluk", "description": "Mutluluk ve baÅŸarÄ±", "image_url": "https://images.unsplash.com/photo-1551292831-023188c04451?w=400"},
    {"id": 20, "name": "Judgement", "name_tr": "Mahkeme", "suit": "major_arcana", "meaning_upright": "YargÄ±, yeniden doÄŸuÅŸ, af", "meaning_reversed": "Kendini yargÄ±lama, geÃ§miÅŸte takÄ±lÄ± kalma", "description": "YargÄ± ve yeniden doÄŸuÅŸ", "image_url": "https://images.unsplash.com/photo-1551292831-023188c04451?w=400"},
    {"id": 21, "name": "The World", "name_tr": "DÃ¼nya", "suit": "major_arcana", "meaning_upright": "Tamamlanma, baÅŸarÄ±, bÃ¼yÃ¼k resim", "meaning_reversed": "Eksiklik, hedeflere ulaÅŸamama", "description": "Tamamlanma ve baÅŸarÄ±", "image_url": "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400"}
]

# Zodiac Signs Data
ZODIAC_SIGNS = {
    "aries": {"name": "KoÃ§", "dates": "21 Mart - 19 Nisan", "element": "AteÅŸ", "ruling_planet": "Mars"},
    "taurus": {"name": "BoÄŸa", "dates": "20 Nisan - 20 MayÄ±s", "element": "Toprak", "ruling_planet": "VenÃ¼s"},
    "gemini": {"name": "Ä°kizler", "dates": "21 MayÄ±s - 20 Haziran", "element": "Hava", "ruling_planet": "MerkÃ¼r"},
    "cancer": {"name": "YengeÃ§", "dates": "21 Haziran - 22 Temmuz", "element": "Su", "ruling_planet": "Ay"},
    "leo": {"name": "Aslan", "dates": "23 Temmuz - 22 AÄŸustos", "element": "AteÅŸ", "ruling_planet": "GÃ¼neÅŸ"},
    "virgo": {"name": "BaÅŸak", "dates": "23 AÄŸustos - 22 EylÃ¼l", "element": "Toprak", "ruling_planet": "MerkÃ¼r"},
    "libra": {"name": "Terazi", "dates": "23 EylÃ¼l - 22 Ekim", "element": "Hava", "ruling_planet": "VenÃ¼s"},
    "scorpio": {"name": "Akrep", "dates": "23 Ekim - 21 KasÄ±m", "element": "Su", "ruling_planet": "PlÃ¼ton"},
    "sagittarius": {"name": "Yay", "dates": "22 KasÄ±m - 21 AralÄ±k", "element": "AteÅŸ", "ruling_planet": "JÃ¼piter"},
    "capricorn": {"name": "OÄŸlak", "dates": "22 AralÄ±k - 19 Ocak", "element": "Toprak", "ruling_planet": "SatÃ¼rn"},
    "aquarius": {"name": "Kova", "dates": "20 Ocak - 18 Åžubat", "element": "Hava", "ruling_planet": "UranÃ¼s"},
    "pisces": {"name": "BalÄ±k", "dates": "19 Åžubat - 20 Mart", "element": "Su", "ruling_planet": "NeptÃ¼n"}
}


# Define Models
class StatusCheck(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    client_name: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class StatusCheckCreate(BaseModel):
    client_name: str

# Coffee Reading Models
class CoffeeReadingCreate(BaseModel):
    image_base64: str
    session_id: Optional[str] = None

class CoffeeReadingResponse(BaseModel):
    id: str
    session_id: str
    symbols_found: List[str]
    interpretation: str
    timestamp: datetime
    confidence_score: Optional[float] = None

class CoffeeReading(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    session_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    image_base64: str
    symbols_found: List[str] = []
    interpretation: str
    confidence_score: Optional[float] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)

# AI Analysis Service
class CoffeeAnalysisService:
    def __init__(self):
        self.gemini_api_key = os.environ.get('GEMINI_API_KEY')
        if not self.gemini_api_key:
            raise ValueError("Gemini API key not found in environment variables")
    
    async def analyze_coffee_grounds(self, image_base64: str, session_id: str) -> dict:
        """Gemini Vision API kullanarak kahve telvesinanaliz et"""
        try:
            # LlmChat instance oluÅŸtur - Gemini iÃ§in
            chat = LlmChat(
                api_key=self.gemini_api_key,
                session_id=session_id,
                system_message="""Sen deneyimli bir kahve falcÄ±sÄ±sÄ±n. Kahve fincanÄ±ndaki telveler ÅŸekillerin ve desenlerin analiz ederek fal okuyorsun.

Kahve falÄ± kurallarÄ±:
- FincanÄ±n farklÄ± bÃ¶lgeleri farklÄ± anlamlar taÅŸÄ±r (kenar: gelecek, orta: ÅŸimdiki zaman, dip: geÃ§miÅŸ)
- Åžekilleri tanÄ±mla: hayvanlar, nesneler, harfler, sayÄ±lar, doÄŸal formlar
- Her ÅŸeklin pozitif ve yapÄ±cÄ± anlamlarÄ±nÄ± ver
- TÃ¼rk kahve falÄ± geleneÄŸine uygun yorumla
- Mistik ama gerÃ§ekÃ§i bir ton kullan

Ã‡Ä±ktÄ± formatÄ±:
1. GÃ¶zlemlenen semboller/ÅŸekiller (liste halinde)
2. Genel yorum ve yorumlama (2-3 paragraf)
3. Ã–neriler ve tavsiyeler"""
            ).with_model("gemini", "gemini-2.0-flash")
            
            # Resim iÃ§eriÄŸi oluÅŸtur
            image_content = ImageContent(image_base64=image_base64)
            
            # Mesaj gÃ¶nder
            user_message = UserMessage(
                text="Bu kahve fincanÄ±ndaki telveler analiz et ve detaylÄ± bir fal yorumu yap. Åžekilleri tanÄ±mla ve anlamlarÄ±nÄ± aÃ§Ä±kla.",
                file_contents=[image_content]
            )
            
            # AI'dan cevap al
            response = await chat.send_message(user_message)
            
            # Response'u parse et
            symbols = self._extract_symbols(response)
            interpretation = response
            confidence_score = 0.85  # Placeholder confidence score
            
            return {
                "symbols_found": symbols,
                "interpretation": interpretation,
                "confidence_score": confidence_score
            }
            
        except Exception as e:
            logging.error(f"Coffee analysis error: {str(e)}")
            raise HTTPException(status_code=500, detail=f"AI analizi sÄ±rasÄ±nda hata oluÅŸtu: {str(e)}")
    
    def _extract_symbols(self, ai_response: str) -> List[str]:
        """AI cevabÄ±ndan sembolleri Ã§Ä±kar"""
        symbols = []
        lines = ai_response.split('\n')
        
        for line in lines:
            line = line.strip()
            if any(keyword in line.lower() for keyword in ['sembol', 'ÅŸekil', 'gÃ¶rÃ¼nÃ¼m', 'tanÄ±mlanan']):
                # Basit sembol Ã§Ä±karma - geliÅŸtirilebilir
                if ':' in line:
                    symbol = line.split(':')[0].strip().replace('-', '').replace('*', '').strip()
                    if len(symbol) > 2 and len(symbol) < 50:
                        symbols.append(symbol)
        
        # Fallback symbols if none found
        if not symbols:
            symbols = ["Gizli mesajlar", "Belirsiz ÅŸekiller", "Enerji akÄ±ÅŸlarÄ±"]
            
        return symbols[:10]  # Max 10 symbol

# Tarot Analysis Service
class TarotAnalysisService:
    def __init__(self):
        self.gemini_api_key = os.environ.get('GEMINI_API_KEY')
        if not self.gemini_api_key:
            raise ValueError("Gemini API key not found in environment variables")
    
    async def interpret_tarot_spread(self, cards_drawn: List[dict], spread_type: str, session_id: str) -> str:
        """Tarot kartlarÄ±nÄ± yorumla"""
        try:
            # Cards bilgisini hazÄ±rla
            cards_info = ""
            positions = {
                "three_card": ["GeÃ§miÅŸ", "Åžimdi", "Gelecek"]
            }
            
            for i, card_data in enumerate(cards_drawn):
                card = card_data["card"]
                position = positions[spread_type][i] if i < len(positions[spread_type]) else f"Pozisyon {i+1}"
                reversed = card_data["reversed"]
                
                cards_info += f"\n{position}: {card['name_tr']} ({card['name']})"
                cards_info += f"\nDurum: {'Ters' if reversed else 'DÃ¼z'}"
                cards_info += f"\nAnlamÄ±: {card['meaning_reversed'] if reversed else card['meaning_upright']}"
                cards_info += f"\nAÃ§Ä±klama: {card['description']}\n"
            
            # LlmChat instance oluÅŸtur
            chat = LlmChat(
                api_key=self.gemini_api_key,
                session_id=session_id,
                system_message="""Sen deneyimli bir tarot okuyucususun. Ã‡ekilen kartlarÄ± analiz ederek kapsamlÄ± ve anlam dolu yorumlar yapÄ±yorsun.

Tarot okuma kurallarÄ±:
- Her kartÄ±n pozisyondaki Ã¶zel anlamÄ±nÄ± deÄŸerlendir
- Kartlar arasÄ±ndaki baÄŸlantÄ±larÄ± ve hikayeyi oluÅŸtur
- Hem bireysel kart anlamlarÄ±nÄ± hem de genel mesajÄ± ver
- YapÄ±cÄ± ve yol gÃ¶sterici tavsiyelerde bulun
- Mistik ama gerÃ§ekÃ§i bir ton kullan
- TÃ¼rk kÃ¼ltÃ¼rÃ¼ne uygun ÅŸekilde yorumla

Ã‡Ä±ktÄ± formatÄ±:
1. Kart analizi (her kart iÃ§in ayrÄ± deÄŸerlendirme)
2. Genel mesaj ve hikaye
3. Pratik Ã¶neriler ve tavsiyeleri"""
            ).with_model("gemini", "gemini-2.0-flash")
            
            # Mesaj gÃ¶nder
            user_message = UserMessage(
                text=f"Bu tarot kartlarÄ±nÄ± {spread_type} yayÄ±lÄ±mÄ± iÃ§in yorumla:\n{cards_info}\n\nDetaylÄ± bir tarot yorumu ve rehberlik yap."
            )
            
            # AI'dan cevap al
            response = await chat.send_message(user_message)
            return response
            
        except Exception as e:
            logging.error(f"Tarot analysis error: {str(e)}")
            raise HTTPException(status_code=500, detail=f"Tarot analizi sÄ±rasÄ±nda hata oluÅŸtu: {str(e)}")

# Palm Analysis Service
class PalmAnalysisService:
    def __init__(self):
        self.gemini_api_key = os.environ.get('GEMINI_API_KEY')
        if not self.gemini_api_key:
            raise ValueError("Gemini API key not found in environment variables")
    
    async def analyze_palm_lines(self, image_base64: str, hand_type: str, session_id: str) -> dict:
        """Gemini Vision API kullanarak el Ã§izgilerini analiz et"""
        try:
            # LlmChat instance oluÅŸtur - Gemini iÃ§in
            chat = LlmChat(
                api_key=self.gemini_api_key,
                session_id=session_id,
                system_message=f"""Sen deneyimli bir el falcÄ±sÄ±sÄ±n. {hand_type} el fotoÄŸrafÄ±ndaki Ã§izgileri analiz ederek fal okuyorsun.

El falÄ± kurallarÄ±:
- Ana Ã§izgileri tanÄ±mla: yaÅŸam Ã§izgisi, kalp Ã§izgisi, kafa Ã§izgisi, kader Ã§izgisi
- Her Ã§izginin uzunluÄŸu, derinliÄŸi, kesintileri analiz et
- El ÅŸekli ve parmak yapÄ±sÄ±nÄ± deÄŸerlendir
- Geleneksel palmistry bilgilerine uygun yorumla
- Pozitif ve yapÄ±cÄ± bir yaklaÅŸÄ±m benimse

Ã‡Ä±ktÄ± formatÄ±:
1. Tespit edilen Ã§izgiler (liste halinde)
2. Her Ã§izginin anlamÄ± ve yorumu
3. Genel kiÅŸilik analizi
4. Gelecekle ilgili Ã¶ngÃ¶rÃ¼ler"""
            ).with_model("gemini", "gemini-2.0-flash")
            
            # Resim iÃ§eriÄŸi oluÅŸtur
            image_content = ImageContent(image_base64=image_base64)
            
            # Mesaj gÃ¶nder
            user_message = UserMessage(
                text=f"Bu {hand_type} el fotoÄŸrafÄ±ndaki Ã§izgileri analiz et ve detaylÄ± bir el falÄ± yorumu yap. Ana Ã§izgileri tanÄ±mla ve anlamlarÄ±nÄ± aÃ§Ä±kla.",
                file_contents=[image_content]
            )
            
            # AI'dan cevap al
            response = await chat.send_message(user_message)
            
            # Response'u parse et
            lines = self._extract_lines(response)
            interpretation = response
            confidence_score = 0.80  # Placeholder confidence score
            
            return {
                "lines_found": lines,
                "interpretation": interpretation,
                "confidence_score": confidence_score
            }
            
        except Exception as e:
            logging.error(f"Palm analysis error: {str(e)}")
            raise HTTPException(status_code=500, detail=f"El falÄ± analizi sÄ±rasÄ±nda hata oluÅŸtu: {str(e)}")
    
    def _extract_lines(self, ai_response: str) -> List[str]:
        """AI cevabÄ±ndan Ã§izgileri Ã§Ä±kar"""
        lines = []
        lines_keywords = ['yaÅŸam Ã§izgisi', 'kalp Ã§izgisi', 'kafa Ã§izgisi', 'kader Ã§izgisi', 'baÅŸarÄ± Ã§izgisi']
        
        for keyword in lines_keywords:
            if keyword.lower() in ai_response.lower():
                lines.append(keyword.title())
        
        # Fallback lines if none found
        if not lines:
            lines = ["YaÅŸam Ã‡izgisi", "Kalp Ã‡izgisi", "Kafa Ã‡izgisi"]
            
        return lines

# Astrology Analysis Service
class AstrologyAnalysisService:
    def __init__(self):
        self.gemini_api_key = os.environ.get('GEMINI_API_KEY')
        if not self.gemini_api_key:
            raise ValueError("Gemini API key not found in environment variables")
    
    def calculate_zodiac_sign(self, birth_date: str) -> str:
        """DoÄŸum tarihinden burÃ§ hesapla"""
        try:
            from datetime import datetime
            date_obj = datetime.strptime(birth_date, "%Y-%m-%d")
            day = date_obj.day
            month = date_obj.month
            
            if (month == 3 and day >= 21) or (month == 4 and day <= 19):
                return "aries"
            elif (month == 4 and day >= 20) or (month == 5 and day <= 20):
                return "taurus"
            elif (month == 5 and day >= 21) or (month == 6 and day <= 20):
                return "gemini"
            elif (month == 6 and day >= 21) or (month == 7 and day <= 22):
                return "cancer"
            elif (month == 7 and day >= 23) or (month == 8 and day <= 22):
                return "leo"
            elif (month == 8 and day >= 23) or (month == 9 and day <= 22):
                return "virgo"
            elif (month == 9 and day >= 23) or (month == 10 and day <= 22):
                return "libra"
            elif (month == 10 and day >= 23) or (month == 11 and day <= 21):
                return "scorpio"
            elif (month == 11 and day >= 22) or (month == 12 and day <= 21):
                return "sagittarius"
            elif (month == 12 and day >= 22) or (month == 1 and day <= 19):
                return "capricorn"
            elif (month == 1 and day >= 20) or (month == 2 and day <= 18):
                return "aquarius"
            else:  # Pisces
                return "pisces"
        except:
            return "unknown"
    
    def calculate_birth_chart(self, birth_date: str, birth_time: str, birth_place: str) -> dict:
        """DoÄŸum haritasÄ± hesapla (basitleÅŸtirilmiÅŸ)"""
        import random
        from datetime import datetime
        
        try:
            date_obj = datetime.strptime(birth_date, "%Y-%m-%d")
            time_parts = birth_time.split(":")
            hour = int(time_parts[0])
            minute = int(time_parts[1]) if len(time_parts) > 1 else 0
            
            # Basit hesaplamalar (gerÃ§ek astroloji hesaplamalarÄ± Ã§ok karmaÅŸÄ±k)
            # Bu Ã¶rnek amaÃ§lÄ± basitleÅŸtirilmiÅŸ versiyonudur
            
            # 12 astroloji evi
            houses = {}
            house_names = [
                "KiÅŸilik", "Mal VarlÄ±ÄŸÄ±", "Ä°letiÅŸim", "Aile", "YaratÄ±cÄ±lÄ±k", "SaÄŸlÄ±k",
                "Ä°liÅŸkiler", "DÃ¶nÃ¼ÅŸÃ¼m", "Felsefe", "Kariyer", "Dostluk", "SpiritÃ¼alite"
            ]
            
            for i in range(12):
                # Her ev iÃ§in burÃ§ hesapla (basitleÅŸtirilmiÅŸ)
                house_sign_index = (date_obj.month + hour + i) % 12
                house_signs = ["aries", "taurus", "gemini", "cancer", "leo", "virgo", 
                              "libra", "scorpio", "sagittarius", "capricorn", "aquarius", "pisces"]
                
                houses[f"house_{i+1}"] = {
                    "name": house_names[i],
                    "sign": house_signs[house_sign_index],
                    "degree": (date_obj.day + minute + i * 30) % 360
                }
            
            # Gezegenler (basitleÅŸtirilmiÅŸ pozisyonlar)
            planets = {
                "sun": {
                    "sign": self.calculate_zodiac_sign(birth_date),
                    "degree": (date_obj.day * 12 + hour) % 360,
                    "house": ((date_obj.day + hour) % 12) + 1
                },
                "moon": {
                    "sign": house_signs[(date_obj.day + hour + 2) % 12],
                    "degree": (date_obj.day * 13 + minute) % 360,
                    "house": ((date_obj.day + hour + 2) % 12) + 1
                },
                "mercury": {
                    "sign": house_signs[(date_obj.month + hour) % 12],
                    "degree": (date_obj.month * 30 + hour * 15) % 360,
                    "house": ((date_obj.month + hour) % 12) + 1
                },
                "venus": {
                    "sign": house_signs[(date_obj.month + date_obj.day) % 12],
                    "degree": (date_obj.month * 25 + date_obj.day * 5) % 360,
                    "house": ((date_obj.month + date_obj.day) % 12) + 1
                },
                "mars": {
                    "sign": house_signs[(date_obj.day + minute) % 12],
                    "degree": (date_obj.day * 18 + minute * 6) % 360,
                    "house": ((date_obj.day + minute) % 12) + 1
                },
                "jupiter": {
                    "sign": house_signs[(date_obj.year % 12)],
                    "degree": (date_obj.year % 360),
                    "house": ((date_obj.year % 12)) + 1
                }
            }
            
            return {
                "houses": houses,
                "planets": planets,
                "ascendant": {
                    "sign": house_signs[(hour + minute // 60) % 12],
                    "degree": (hour * 15 + minute // 4) % 360
                },
                "midheaven": {
                    "sign": house_signs[(hour + 6) % 12],
                    "degree": (hour * 15 + 90) % 360
                }
            }
            
        except Exception as e:
            logging.error(f"Birth chart calculation error: {e}")
            return {}
    
    async def generate_astrology_reading(self, birth_info: dict, session_id: str) -> str:
        """Astroloji okuma oluÅŸtur"""
        try:
            zodiac_sign = birth_info["zodiac_sign"]
            zodiac_info = ZODIAC_SIGNS.get(zodiac_sign, {})
            birth_chart = birth_info.get("birth_chart", {})
            
            # LlmChat instance oluÅŸtur
            chat = LlmChat(
                api_key=self.gemini_api_key,
                session_id=session_id,
                system_message="""Sen deneyimli bir astrologsun. DoÄŸum bilgileri ve doÄŸum haritasÄ± verilen kiÅŸi iÃ§in kapsamlÄ± astroloji yorumu yapÄ±yorsun.

Astroloji kurallarÄ±:
- BurÃ§ Ã¶zelliklerini detaylÄ± analiz et
- DoÄŸum saati ve yerinin etkilerini deÄŸerlendir
- Gezegen konumlarÄ±nÄ±n kiÅŸilik Ã¼zerindeki etkilerini aÃ§Ä±kla
- Astroloji evlerinin anlamlarÄ±nÄ± deÄŸerlendir
- YÃ¼kseleni ve Orta GÃ¶kyÃ¼zÃ¼'nÃ¼n etkilerini aÃ§Ä±kla
- Gelecek dÃ¶nemler iÃ§in Ã¶ngÃ¶rÃ¼lerde bulun
- Pozitif ve yol gÃ¶sterici bir yaklaÅŸÄ±m benimse

Ã‡Ä±ktÄ± formatÄ±:
1. Ana burÃ§ analizi ve kiÅŸilik Ã¶zellikleri
2. YÃ¼kselen burÃ§ ve etkisi
3. Gezegen konumlarÄ± analizi
4. GÃ¼Ã§lÃ¼ yÃ¶nler ve potansiyeller
5. Dikkat edilmesi gereken alanlar
6. Gelecek dÃ¶neme dair Ã¶ngÃ¶rÃ¼ler
7. Ã–neriler ve tavsiyeler"""
            ).with_model("gemini", "gemini-2.0-flash")
            
            # Chart bilgilerini hazÄ±rla
            chart_info = ""
            if birth_chart.get("planets"):
                chart_info += "\nGezegen KonumlarÄ±:\n"
                for planet, info in birth_chart["planets"].items():
                    planet_tr = {
                        "sun": "GÃ¼neÅŸ", "moon": "Ay", "mercury": "MerkÃ¼r", 
                        "venus": "VenÃ¼s", "mars": "Mars", "jupiter": "JÃ¼piter"
                    }.get(planet, planet)
                    sign_name = ZODIAC_SIGNS.get(info["sign"], {}).get("name", info["sign"])
                    chart_info += f"- {planet_tr}: {sign_name} burcunda, {info['house']}. evde\n"
            
            if birth_chart.get("ascendant"):
                asc_sign = ZODIAC_SIGNS.get(birth_chart["ascendant"]["sign"], {}).get("name", "Bilinmiyor")
                chart_info += f"\nYÃ¼kselen: {asc_sign}"
            
            # Mesaj gÃ¶nder
            user_message = UserMessage(
                text=f"""DoÄŸum bilgileri:
- DoÄŸum Tarihi: {birth_info['birth_date']}
- DoÄŸum Saati: {birth_info['birth_time']}
- DoÄŸum Yeri: {birth_info['birth_place']}
- Ana BurÃ§: {zodiac_info.get('name', 'Bilinmiyor')}
- Element: {zodiac_info.get('element', 'Bilinmiyor')}
- YÃ¶netici Gezegen: {zodiac_info.get('ruling_planet', 'Bilinmiyor')}

{chart_info}

Bu kapsamlÄ± doÄŸum haritasÄ± bilgilerine gÃ¶re detaylÄ± astroloji yorumu ve kiÅŸilik analizi yap."""
            )
            
            # AI'dan cevap al
            response = await chat.send_message(user_message)
            return response
            
        except Exception as e:
            logging.error(f"Astrology analysis error: {str(e)}")
            raise HTTPException(status_code=500, detail=f"Astroloji analizi sÄ±rasÄ±nda hata oluÅŸtu: {str(e)}")

# Initialize services
coffee_service = CoffeeAnalysisService()
tarot_service = TarotAnalysisService()
palm_service = PalmAnalysisService()
astrology_service = AstrologyAnalysisService()

# Authentication Endpoints
@api_router.post("/auth/register", response_model=UserResponse)
async def register_user(user_data: UserRegister, background_tasks: BackgroundTasks):
    """Yeni kullanÄ±cÄ± kaydÄ±"""
    try:
        # Email kontrolÃ¼
        existing_user = await db.users.find_one({"email": user_data.email})
        if existing_user:
            raise HTTPException(status_code=400, detail="Bu email adresi zaten kayÄ±tlÄ±")
        
        # ParolayÄ± hash'le
        hashed_password = auth_service.hash_password(user_data.password)
        
        # DoÄŸrulama token'Ä± oluÅŸtur
        verification_token = auth_service.generate_verification_token()
        
        # KullanÄ±cÄ± oluÅŸtur
        user = User(
            email=user_data.email,
            hashed_password=hashed_password,
            verification_token=verification_token
        )
        
        # VeritabanÄ±na kaydet
        await db.users.insert_one(user.dict())
        
        # DoÄŸrulama emaili gÃ¶nder (background task)
        background_tasks.add_task(
            auth_service.email_service.send_verification_email,
            user_data.email,
            verification_token
        )
        
        return UserResponse(
            id=user.id,
            email=user.email,
            is_verified=user.is_verified,
            created_at=user.created_at
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logging.error(f"User registration error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"KayÄ±t hatasÄ±: {str(e)}")

@api_router.post("/auth/login", response_model=Token)
async def login_user(user_data: UserLogin):
    """KullanÄ±cÄ± giriÅŸi"""
    try:
        # KullanÄ±cÄ±yÄ± bul
        user = await db.users.find_one({"email": user_data.email})
        if not user:
            raise HTTPException(status_code=401, detail="Email veya parola hatalÄ±")
        
        # ParolayÄ± doÄŸrula
        if not auth_service.verify_password(user_data.password, user["hashed_password"]):
            raise HTTPException(status_code=401, detail="Email veya parola hatalÄ±")
        
        # Email doÄŸrulanmÄ±ÅŸ mÄ± kontrol et
        if not user["is_verified"]:
            raise HTTPException(status_code=401, detail="LÃ¼tfen Ã¶nce email adresinizi doÄŸrulayÄ±n")
        
        # JWT token oluÅŸtur
        access_token = auth_service.create_access_token(
            data={"sub": user["id"], "email": user["email"]}
        )
        
        return Token(
            access_token=access_token,
            token_type="bearer",
            user=UserResponse(
                id=user["id"],
                email=user["email"],
                is_verified=user["is_verified"],
                created_at=user["created_at"]
            )
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logging.error(f"User login error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"GiriÅŸ hatasÄ±: {str(e)}")

@api_router.post("/auth/verify-email")
async def verify_email(verify_data: VerifyEmail):
    """Email doÄŸrulama"""
    try:
        # Token ile kullanÄ±cÄ±yÄ± bul
        user = await db.users.find_one({"verification_token": verify_data.token})
        if not user:
            raise HTTPException(status_code=400, detail="GeÃ§ersiz doÄŸrulama token'Ä±")
        
        # KullanÄ±cÄ±yÄ± doÄŸrulanmÄ±ÅŸ olarak iÅŸaretle
        await db.users.update_one(
            {"id": user["id"]},
            {
                "$set": {
                    "is_verified": True,
                    "verification_token": None,
                    "updated_at": datetime.utcnow()
                }
            }
        )
        
        return {"message": "Email adresiniz baÅŸarÄ±yla doÄŸrulandÄ±"}
        
    except HTTPException:
        raise
    except Exception as e:
        logging.error(f"Email verification error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Email doÄŸrulama hatasÄ±: {str(e)}")

@api_router.get("/auth/me", response_model=UserResponse)
async def get_me(current_user: User = Depends(get_current_user)):
    """Mevcut kullanÄ±cÄ± bilgilerini al"""
    return UserResponse(
        id=current_user.id,
        email=current_user.email,
        is_verified=current_user.is_verified,
        created_at=current_user.created_at
    )

@api_router.post("/auth/resend-verification")
async def resend_verification_email(user_data: UserLogin, background_tasks: BackgroundTasks):
    """DoÄŸrulama emailini tekrar gÃ¶nder"""
    try:
        # KullanÄ±cÄ±yÄ± bul
        user = await db.users.find_one({"email": user_data.email})
        if not user:
            raise HTTPException(status_code=404, detail="KullanÄ±cÄ± bulunamadÄ±")
        
        # ParolayÄ± doÄŸrula
        if not auth_service.verify_password(user_data.password, user["hashed_password"]):
            raise HTTPException(status_code=401, detail="Parola hatalÄ±")
        
        # Zaten doÄŸrulanmÄ±ÅŸ mÄ± kontrol et
        if user["is_verified"]:
            raise HTTPException(status_code=400, detail="Email adresi zaten doÄŸrulanmÄ±ÅŸ")
        
        # Yeni token oluÅŸtur
        new_verification_token = auth_service.generate_verification_token()
        
        # Token'Ä± gÃ¼ncelle
        await db.users.update_one(
            {"id": user["id"]},
            {
                "$set": {
                    "verification_token": new_verification_token,
                    "updated_at": datetime.utcnow()
                }
            }
        )
        
        # DoÄŸrulama emaili gÃ¶nder (background task)
        background_tasks.add_task(
            auth_service.email_service.send_verification_email,
            user["email"],
            new_verification_token
        )
        
        return {"message": "DoÄŸrulama emaili tekrar gÃ¶nderildi"}
        
    except HTTPException:
        raise
    except Exception as e:
        logging.error(f"Resend verification error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Email tekrar gÃ¶nderme hatasÄ±: {str(e)}")

# Add your routes to the router instead of directly to app
@api_router.get("/")
async def root():
    return {"message": "Fal UygulamasÄ± API - HoÅŸ Geldiniz"}

@api_router.post("/status", response_model=StatusCheck)
async def create_status_check(input: StatusCheckCreate):
    status_dict = input.dict()
    status_obj = StatusCheck(**status_dict)
    _ = await db.status_checks.insert_one(status_obj.dict())
    return status_obj

@api_router.get("/status", response_model=List[StatusCheck])
async def get_status_checks():
    status_checks = await db.status_checks.find().to_list(1000)
    return [StatusCheck(**status_check) for status_check in status_checks]

# Coffee Reading Endpoints
@api_router.post("/coffee-reading", response_model=CoffeeReadingResponse)
async def create_coffee_reading(reading_data: CoffeeReadingCreate, current_user: User = Depends(get_current_user)):
    """Kahve falÄ± okuma oluÅŸtur - Sadece kayÄ±tlÄ± kullanÄ±cÄ±lar"""
    try:
        # Session ID oluÅŸtur eÄŸer yoksa (kullanÄ±cÄ± ID'si ile baÄŸlantÄ±lÄ±)
        session_id = reading_data.session_id or f"{current_user.id}_{uuid.uuid4()}"
        
        # AI analizi yap
        analysis = await coffee_service.analyze_coffee_grounds(
            reading_data.image_base64, 
            session_id
        )
        
        # Reading objesi oluÅŸtur (kullanÄ±cÄ± ID'si ile birlikte)
        coffee_reading = CoffeeReading(
            session_id=session_id,
            image_base64=reading_data.image_base64,
            symbols_found=analysis["symbols_found"],
            interpretation=analysis["interpretation"],
            confidence_score=analysis["confidence_score"]
        )
        
        # MongoDB'ye kaydet (kullanÄ±cÄ± ID'si de eklenir)
        reading_dict = coffee_reading.dict()
        reading_dict["user_id"] = current_user.id
        await db.coffee_readings.insert_one(reading_dict)
        
        # Response oluÅŸtur
        return CoffeeReadingResponse(
            id=coffee_reading.id,
            session_id=coffee_reading.session_id,
            symbols_found=coffee_reading.symbols_found,
            interpretation=coffee_reading.interpretation,
            timestamp=coffee_reading.timestamp,
            confidence_score=coffee_reading.confidence_score
        )
        
    except Exception as e:
        logging.error(f"Coffee reading creation error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Kahve falÄ± okuma hatasÄ±: {str(e)}")

@api_router.get("/coffee-reading/{session_id}", response_model=List[CoffeeReadingResponse])
async def get_coffee_readings(session_id: str, current_user: User = Depends(get_current_user)):
    """Belirli bir session'a ait kahve falÄ± okumalarÄ±nÄ± getir - Sadece kullanÄ±cÄ±nÄ±n kendi okumalarÄ±nÄ±"""
    try:
        readings = await db.coffee_readings.find(
            {"session_id": session_id, "user_id": current_user.id}
        ).sort("timestamp", -1).to_list(100)
        
        return [
            CoffeeReadingResponse(
                id=reading["id"],
                session_id=reading["session_id"],
                symbols_found=reading["symbols_found"],
                interpretation=reading["interpretation"],
                timestamp=reading["timestamp"],
                confidence_score=reading.get("confidence_score")
            ) for reading in readings
        ]
        
    except Exception as e:
        logging.error(f"Get coffee readings error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Kahve falÄ± geÃ§miÅŸi getirme hatasÄ±: {str(e)}")

@api_router.get("/coffee-reading/{session_id}/{reading_id}", response_model=CoffeeReadingResponse)
async def get_coffee_reading(session_id: str, reading_id: str, current_user: User = Depends(get_current_user)):
    """Belirli bir kahve falÄ± okumasÄ±nÄ± getir - Sadece kullanÄ±cÄ±nÄ±n kendi okumalarÄ±nÄ±"""
    try:
        reading = await db.coffee_readings.find_one({
            "id": reading_id,
            "session_id": session_id,
            "user_id": current_user.id
        })
        
        if not reading:
            raise HTTPException(status_code=404, detail="Kahve falÄ± bulunamadÄ±")
        
        return CoffeeReadingResponse(
            id=reading["id"],
            session_id=reading["session_id"],
            symbols_found=reading["symbols_found"],
            interpretation=reading["interpretation"],
            timestamp=reading["timestamp"],
            confidence_score=reading.get("confidence_score")
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logging.error(f"Get coffee reading error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Kahve falÄ± getirme hatasÄ±: {str(e)}")

# Tarot Reading Endpoints
@api_router.get("/tarot-cards", response_model=List[TarotCard])
async def get_tarot_cards():
    """TÃ¼m tarot kartlarÄ±nÄ± getir"""
    try:
        return [TarotCard(**card) for card in TAROT_DECK]
    except Exception as e:
        logging.error(f"Get tarot cards error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Tarot kartlarÄ± getirme hatasÄ±: {str(e)}")

@api_router.post("/tarot-reading", response_model=TarotReadingResponse)
async def create_tarot_reading(reading_data: TarotReadingCreate, current_user: User = Depends(get_current_user)):
    """Yeni tarot okuma oluÅŸtur - Sadece kayÄ±tlÄ± kullanÄ±cÄ±lar"""
    try:
        # Session ID oluÅŸtur eÄŸer yoksa (kullanÄ±cÄ± ID'si ile baÄŸlantÄ±lÄ±)
        session_id = reading_data.session_id or f"{current_user.id}_{uuid.uuid4()}"
        
        # KartlarÄ± karÄ±ÅŸtÄ±r ve seÃ§
        if reading_data.spread_type == "three_card":
            num_cards = 3
        else:
            num_cards = 3  # Default
        
        # Random kart seÃ§imi
        selected_cards = random.sample(TAROT_DECK, num_cards)
        
        # Her kart iÃ§in ters/dÃ¼z durumu belirle
        cards_drawn = []
        for card in selected_cards:
            card_data = {
                "card": card,
                "position": f"position_{len(cards_drawn) + 1}",
                "reversed": random.choice([True, False])
            }
            cards_drawn.append(card_data)
        
        # AI yorumlama
        interpretation = await tarot_service.interpret_tarot_spread(
            cards_drawn, reading_data.spread_type, session_id
        )
        
        # Reading objesi oluÅŸtur
        tarot_reading = TarotReading(
            session_id=session_id,
            spread_type=reading_data.spread_type,
            cards_drawn=cards_drawn,
            interpretation=interpretation
        )
        
        # MongoDB'ye kaydet (kullanÄ±cÄ± ID'si de eklenir)
        reading_dict = tarot_reading.dict()
        reading_dict["user_id"] = current_user.id
        await db.tarot_readings.insert_one(reading_dict)
        
        # Response oluÅŸtur
        return TarotReadingResponse(
            id=tarot_reading.id,
            session_id=tarot_reading.session_id,
            spread_type=tarot_reading.spread_type,
            cards_drawn=tarot_reading.cards_drawn,
            interpretation=tarot_reading.interpretation,
            timestamp=tarot_reading.timestamp
        )
        
    except Exception as e:
        logging.error(f"Tarot reading creation error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Tarot okuma hatasÄ±: {str(e)}")

@api_router.get("/tarot-reading/{session_id}", response_model=List[TarotReadingResponse])
async def get_tarot_readings(session_id: str, current_user: User = Depends(get_current_user)):
    """Belirli bir session'a ait tarot okumalarÄ±nÄ± getir - Sadece kullanÄ±cÄ±nÄ±n kendi okumalarÄ±nÄ±"""
    try:
        readings = await db.tarot_readings.find(
            {"session_id": session_id, "user_id": current_user.id}
        ).sort("timestamp", -1).to_list(100)
        
        return [
            TarotReadingResponse(
                id=reading["id"],
                session_id=reading["session_id"],
                spread_type=reading["spread_type"],
                cards_drawn=reading["cards_drawn"],
                interpretation=reading["interpretation"],
                timestamp=reading["timestamp"]
            ) for reading in readings
        ]
        
    except Exception as e:
        logging.error(f"Get tarot readings error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Tarot geÃ§miÅŸi getirme hatasÄ±: {str(e)}")

@api_router.get("/tarot-reading/{session_id}/{reading_id}", response_model=TarotReadingResponse)
async def get_tarot_reading(session_id: str, reading_id: str, current_user: User = Depends(get_current_user)):
    """Belirli bir tarot okumasÄ±nÄ± getir - Sadece kullanÄ±cÄ±nÄ±n kendi okumalarÄ±nÄ±"""
    try:
        reading = await db.tarot_readings.find_one({
            "id": reading_id,
            "session_id": session_id,
            "user_id": current_user.id
        })
        
        if not reading:
            raise HTTPException(status_code=404, detail="Tarot okuma bulunamadÄ±")
        
        return TarotReadingResponse(
            id=reading["id"],
            session_id=reading["session_id"],
            spread_type=reading["spread_type"],
            cards_drawn=reading["cards_drawn"],
            interpretation=reading["interpretation"],
            timestamp=reading["timestamp"]
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logging.error(f"Get tarot reading error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Tarot okuma getirme hatasÄ±: {str(e)}")
# Palm Reading Endpoints
@api_router.post("/palm-reading", response_model=PalmReadingResponse)
async def create_palm_reading(reading_data: PalmReadingCreate, current_user: User = Depends(get_current_user)):
    """Yeni el falÄ± okuma oluÅŸtur - Sadece kayÄ±tlÄ± kullanÄ±cÄ±lar"""
    try:
        # Session ID oluÅŸtur eÄŸer yoksa (kullanÄ±cÄ± ID'si ile baÄŸlantÄ±lÄ±)
        session_id = reading_data.session_id or f"{current_user.id}_{uuid.uuid4()}"
        
        # AI analizi yap
        analysis = await palm_service.analyze_palm_lines(
            reading_data.image_base64, 
            reading_data.hand_type,
            session_id
        )
        
        # Reading objesi oluÅŸtur
        palm_reading = PalmReading(
            session_id=session_id,
            image_base64=reading_data.image_base64,
            hand_type=reading_data.hand_type,
            lines_found=analysis["lines_found"],
            interpretation=analysis["interpretation"],
            confidence_score=analysis["confidence_score"]
        )
        
        # MongoDB'ye kaydet
        await db.palm_readings.insert_one(palm_reading.dict())
        
        # Response oluÅŸtur
        return PalmReadingResponse(
            id=palm_reading.id,
            session_id=palm_reading.session_id,
            hand_type=palm_reading.hand_type,
            lines_found=palm_reading.lines_found,
            interpretation=palm_reading.interpretation,
            timestamp=palm_reading.timestamp,
            confidence_score=palm_reading.confidence_score
        )
        
    except Exception as e:
        logging.error(f"Palm reading creation error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"El falÄ± okuma hatasÄ±: {str(e)}")

@api_router.get("/palm-reading/{session_id}", response_model=List[PalmReadingResponse])
async def get_palm_readings(session_id: str):
    """Belirli bir session'a ait el falÄ± okumalarÄ±nÄ± getir"""
    try:
        readings = await db.palm_readings.find(
            {"session_id": session_id}
        ).sort("timestamp", -1).to_list(100)
        
        return [
            PalmReadingResponse(
                id=reading["id"],
                session_id=reading["session_id"],
                hand_type=reading["hand_type"],
                lines_found=reading["lines_found"],
                interpretation=reading["interpretation"],
                timestamp=reading["timestamp"],
                confidence_score=reading.get("confidence_score")
            ) for reading in readings
        ]
        
    except Exception as e:
        logging.error(f"Get palm readings error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"El falÄ± geÃ§miÅŸi getirme hatasÄ±: {str(e)}")

# Astrology Reading Endpoints
@api_router.post("/astrology-reading", response_model=AstrologyReadingResponse)
async def create_astrology_reading(reading_data: AstrologyReadingCreate):
    """Yeni astroloji okuma oluÅŸtur"""
    try:
        # Session ID oluÅŸtur eÄŸer yoksa
        session_id = reading_data.session_id or str(uuid.uuid4())
        
        # BurÃ§ hesapla
        zodiac_sign = astrology_service.calculate_zodiac_sign(reading_data.birth_date)
        
        # DoÄŸum haritasÄ± hesapla
        birth_chart = astrology_service.calculate_birth_chart(
            reading_data.birth_date,
            reading_data.birth_time,
            reading_data.birth_place
        )
        
        # Gezegen bilgileri (doÄŸum haritasÄ±ndan)
        planets = birth_chart.get("planets", {
            "sun": ZODIAC_SIGNS.get(zodiac_sign, {}).get("name", "Bilinmiyor"),
            "moon": "YaklaÅŸÄ±k hesaplama gerekli",
            "rising": "DoÄŸum saati ile hesaplanÄ±r"
        })
        
        # Birth info hazÄ±rla
        birth_info = {
            "birth_date": reading_data.birth_date,
            "birth_time": reading_data.birth_time,
            "birth_place": reading_data.birth_place,
            "zodiac_sign": zodiac_sign,
            "birth_chart": birth_chart
        }
        
        # AI yorumlama
        interpretation = await astrology_service.generate_astrology_reading(birth_info, session_id)
        
        # Reading objesi oluÅŸtur
        astrology_reading = AstrologyReading(
            session_id=session_id,
            birth_date=reading_data.birth_date,
            birth_time=reading_data.birth_time,
            birth_place=reading_data.birth_place,
            zodiac_sign=zodiac_sign,
            planets=planets,
            birth_chart=birth_chart,
            interpretation=interpretation
        )
        
        # MongoDB'ye kaydet
        await db.astrology_readings.insert_one(astrology_reading.dict())
        
        # Response oluÅŸtur
        return AstrologyReadingResponse(
            id=astrology_reading.id,
            session_id=astrology_reading.session_id,
            birth_date=astrology_reading.birth_date,
            birth_time=astrology_reading.birth_time,
            birth_place=astrology_reading.birth_place,
            zodiac_sign=astrology_reading.zodiac_sign,
            planets=astrology_reading.planets,
            birth_chart=astrology_reading.birth_chart,
            interpretation=astrology_reading.interpretation,
            timestamp=astrology_reading.timestamp
        )
        
    except Exception as e:
        logging.error(f"Astrology reading creation error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Astroloji okuma hatasÄ±: {str(e)}")

@api_router.get("/astrology-reading/{session_id}", response_model=List[AstrologyReadingResponse])
async def get_astrology_readings(session_id: str):
    """Belirli bir session'a ait astroloji okumalarÄ±nÄ± getir"""
    try:
        readings = await db.astrology_readings.find(
            {"session_id": session_id}
        ).sort("timestamp", -1).to_list(100)
        
        return [
            AstrologyReadingResponse(
                id=reading["id"],
                session_id=reading["session_id"],
                birth_date=reading["birth_date"],
                birth_time=reading["birth_time"],
                birth_place=reading["birth_place"],
                zodiac_sign=reading["zodiac_sign"],
                planets=reading["planets"],
                birth_chart=reading.get("birth_chart", {}),
                interpretation=reading["interpretation"],
                timestamp=reading["timestamp"]
            ) for reading in readings
        ]
        
    except Exception as e:
        logging.error(f"Get astrology readings error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Astroloji geÃ§miÅŸi getirme hatasÄ±: {str(e)}")

@api_router.get("/zodiac-signs")
async def get_zodiac_signs():
    """TÃ¼m burÃ§ bilgilerini getir"""
    try:
        return ZODIAC_SIGNS
    except Exception as e:
        logging.error(f"Get zodiac signs error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"BurÃ§ bilgileri getirme hatasÄ±: {str(e)}")

# Health check endpoint
@api_router.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow(),
        "services": {
            "database": "connected",
            "ai_service": "available" if os.environ.get('GEMINI_API_KEY') else "unavailable",
            "features": {
                "coffee_reading": True,
                "tarot_reading": True,
                "palm_reading": True,
                "astrology": True
            }
        }
    }

# Include the router in the main app
app.include_router(api_router)

app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@app.on_event("shutdown")
async def shutdown_db_client():
    client.close()
